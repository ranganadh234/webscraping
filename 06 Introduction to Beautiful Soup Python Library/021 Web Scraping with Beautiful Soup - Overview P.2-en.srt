1
00:00:00,420 --> 00:00:01,850
Hello everyone!

2
00:00:01,990 --> 00:00:09,060
In the last video we discussed how to make

3
00:00:01,990 --> 00:00:09,060
a soup out of a HTML file. By soup

4
00:00:09,060 --> 00:00:18,080
I mean the way we parsed our HTML file and the tree. OK, so in this video we are going to discuss how

5
00:00:18,080 --> 00:00:22,250
to make a soup out of any website

6
00:00:22,310 --> 00:00:29,930
HTML. In our case, we are going to send a request to Google to receive the HTML version of Google,

7
00:00:30,020 --> 00:00:35,140
I mean the response Google servers send us back, and we have to make a soup out of it.

8
00:00:35,150 --> 00:00:42,530
So right now I have this header which is basically saying that I'm Crome and I'm sending a request

9
00:00:42,530 --> 00:00:44,420
to "Google.com".

10
00:00:44,600 --> 00:00:54,540
So if I print this "google_page.content", this response content, you can see this sent me the HTML

11
00:00:54,540 --> 00:00:57,270
for the home page of Google.

12
00:00:57,540 --> 00:00:59,840
That's the string here.

13
00:01:00,030 --> 00:01:02,880
OK, so how do we make a soup.

14
00:01:03,120 --> 00:01:05,880
We say "soup" is equals to "BeautifulSoup".

15
00:01:05,970 --> 00:01:13,980
And the first parameter was the HTML file which in our case is "google_page.content" and next parameter

16
00:01:14,070 --> 00:01:20,310
is the parser I'm using. I'm using "lxml" and if you don't have it installed you could use the "html.parser".

17
00:01:21,290 --> 00:01:25,520
Just write it down.

18
00:01:21,290 --> 00:01:25,520
OK.

19
00:01:26,060 --> 00:01:34,130
So now I have made a soup out of this HTML file and a if I print it.

20
00:01:36,680 --> 00:01:37,480
Pretty print it.

21
00:01:37,480 --> 00:01:40,340
Sorry.

22
00:01:37,480 --> 00:01:40,340
You can see

23
00:01:43,280 --> 00:01:46,380
that I have the Google home page HTML here.

24
00:01:48,310 --> 00:01:54,030
And just to quickly go now, I just want to quickly go over some tags here so that we are familiar what

25
00:01:54,030 --> 00:01:59,240
tags are and how this tree is structured.

26
00:01:59,320 --> 00:02:06,460
We have HTML tag, we have "head" tag, we have "link" tag, we have "script" tag and these are all tags.

27
00:02:06,470 --> 00:02:07,050
OK.

28
00:02:07,210 --> 00:02:12,730
And the tree is structured like HTML is the parent of everyone here.

29
00:02:12,970 --> 00:02:21,920
And it has two children, "head" and "body". Normal too, I mean almost each HTML file is structured this way.

30
00:02:21,960 --> 00:02:27,270
OK, we have here that body structure and then body as for the children and similarly had this for the

31
00:02:27,270 --> 00:02:28,270
children.

32
00:02:28,830 --> 00:02:37,730
OK, so I think you're more familiar with how we can make a tree out of any website HTML and how to pretty print

33
00:02:37,730 --> 00:02:46,500
this. Next we are going to discuss how to access these tags like a very basic version of it and how

34
00:02:46,560 --> 00:02:55,250
to access some attributes of these tags and how the different tags methods work.

35
00:02:55,590 --> 00:02:56,040
Thank you.

