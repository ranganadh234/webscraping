1
00:00:01,120 --> 00:00:07,660
Hello everyone! In this video, we are going to discuss

2
00:00:01,120 --> 00:00:07,660
how we are going to download the captions for all the images

3
00:00:07,690 --> 00:00:10,540
we have.

4
00:00:10,610 --> 00:00:17,880
So in the previous video, we were able to

5
00:00:10,610 --> 00:00:17,880
download all the photos which are here in the folder

6
00:00:17,960 --> 00:00:24,420
in the desktop. In this video, we are

7
00:00:17,960 --> 00:00:24,420
going to move forward with captions.

8
00:00:24,420 --> 00:00:28,370
So now before we actually download the

9
00:00:24,420 --> 00:00:28,370
captions we need to know where they are.

10
00:00:28,560 --> 00:00:29,650
Right.

11
00:00:29,820 --> 00:00:40,120
So if I open a photo I can see that I have

12
00:00:29,820 --> 00:00:40,120
this caption here, "View" and these smileys, right. OK.

13
00:00:41,490 --> 00:00:44,610
So what do we do now is we need to know

14
00:00:44,650 --> 00:00:48,840
where is this, like where is the location of this caption here.

15
00:00:48,840 --> 00:00:49,520
Right.

16
00:00:49,870 --> 00:00:52,220
So if I just close this.

17
00:00:52,740 --> 00:00:53,640
I use...

18
00:00:58,180 --> 00:01:04,590
I'm at this image right now and you can see that

19
00:00:58,180 --> 00:01:04,590
the "alt" attribute contains the caption for

20
00:01:04,590 --> 00:01:05,730
this image.

21
00:01:05,970 --> 00:01:09,030
Let me move forward to another image.

22
00:01:09,040 --> 00:01:13,000
OK, let's say that I'm here,

23
00:01:13,060 --> 00:01:23,370
at this image, and it contains a caption "View".

24
00:01:13,060 --> 00:01:23,370
And if I open this you can see that this is exactly

25
00:01:23,370 --> 00:01:24,550
what we have here.

26
00:01:24,570 --> 00:01:25,170
Right.

27
00:01:25,500 --> 00:01:31,890
So the image tag contains the source for the

28
00:01:25,500 --> 00:01:31,890
image like we're like the link for that image as to

29
00:01:31,890 --> 00:01:34,650
where that image is on Internet.

30
00:01:34,710 --> 00:01:38,670
And it also contains a caption for that image.

31
00:01:39,590 --> 00:01:40,340
Perfect.

32
00:01:40,620 --> 00:01:40,880
OK.

33
00:01:40,920 --> 00:01:46,380
So now that we already have these image tags

34
00:01:40,920 --> 00:01:46,380
what we're going to do is we are going to use

35
00:01:46,380 --> 00:01:48,060
them to get the captions.

36
00:01:48,090 --> 00:01:57,180
And we are going to write those captions in the directory

37
00:01:48,090 --> 00:01:57,180
where we have our photos. So we are going to make another

38
00:01:57,240 --> 00:02:00,070
folder here and that directory here named captions.

39
00:02:00,090 --> 00:02:06,760
And we're going to have every caption there

40
00:02:00,090 --> 00:02:06,760
for each of the images we have downloaded. Ok.

41
00:02:07,900 --> 00:02:10,460
So let's start with that now.

42
00:02:11,680 --> 00:02:15,190
So what do we do here is I'm going to make a function.

43
00:02:15,630 --> 00:02:25,980
"def download_captions", now what I would expect to

44
00:02:15,630 --> 00:02:25,980
have is images like the list of images we have,

45
00:02:25,980 --> 00:02:28,770
we already have that, we get that here, right.

46
00:02:28,770 --> 00:02:30,620
All images.

47
00:02:30,680 --> 00:02:36,550
So once we have that, what we are going to do is we

48
00:02:30,680 --> 00:02:36,550
need to make sure that we have the location as to where we're

49
00:02:36,560 --> 00:02:40,010
going to store these captions.

50
00:02:40,010 --> 00:02:45,380
So the location is supposed to be a folder in this

51
00:02:40,010 --> 00:02:45,380
directory, instaPhotos, we need to make a folder

52
00:02:45,380 --> 00:02:45,750
here.

53
00:02:45,770 --> 00:02:46,490
Right.

54
00:02:46,490 --> 00:02:47,420
So how do we do that.

55
00:02:47,420 --> 00:02:52,980
First we decide the caption path like "captions".

56
00:02:53,730 --> 00:02:55,100
I'm sorry.

57
00:02:55,370 --> 00:03:03,390
"captions_folder_path" is equals

58
00:02:55,370 --> 00:03:03,390
to... Let's use "os.path.join".

59
00:03:04,320 --> 00:03:08,980
And what we would be using is "self.path".

60
00:03:09,120 --> 00:03:10,980
And then I can write captions.

61
00:03:14,200 --> 00:03:19,270
So "os.path.exists", "caption_folder_path".

62
00:03:20,770 --> 00:03:25,000
If it doesn't exist then make sure it does now.

63
00:03:25,110 --> 00:03:26,400
Right.

64
00:03:26,670 --> 00:03:28,320
We create the directory.

65
00:03:28,330 --> 00:03:30,230
Now we have the directory here.

66
00:03:30,730 --> 00:03:39,160
What we want to do next is we want to get the

67
00:03:30,730 --> 00:03:39,160
captions. So let's have a loop here, "for image in

68
00:03:39,250 --> 00:03:41,610
images" and I say print

69
00:03:44,250 --> 00:04:01,280
"image['alt']" and let's call this,

70
00:03:44,250 --> 00:04:01,280
"self.downloading_captions" and I say then "all_images".

71
00:04:02,390 --> 00:04:06,040
I'm going to run this now and we are just going to see that.

72
00:04:06,050 --> 00:04:08,830
Are we getting all the captions for all the photos?

73
00:04:08,850 --> 00:04:09,920
Or not, right.

74
00:04:13,440 --> 00:04:26,680
So it's going to log us in now.

75
00:04:26,810 --> 00:04:29,370
So we got an exception, "Could not find search bar".

76
00:04:29,380 --> 00:04:32,160
And the reason behind that is the page hadn't loaded.

77
00:04:32,200 --> 00:04:38,790
So I'm just going to increase the sleep

78
00:04:32,200 --> 00:04:38,790
timings for that. Just give me a second.

79
00:04:41,920 --> 00:04:43,130
Ok, so

80
00:04:45,360 --> 00:04:53,440
"close_dialog_box", go to implementation. Ok, I'm

81
00:04:45,360 --> 00:04:53,440
going to increase that to say 10 seconds for now.

82
00:05:04,790 --> 00:05:07,450
So we are opening Instagram.

83
00:05:10,850 --> 00:05:21,890
Log in, logging in.

84
00:05:21,960 --> 00:05:24,080
We closed the dialog box.

85
00:05:24,090 --> 00:05:29,670
We have our target profile open, it

86
00:05:24,090 --> 00:05:29,670
is going to scroll down now.

87
00:05:36,800 --> 00:05:42,410
So basically we are printing the caption here

88
00:05:36,800 --> 00:05:42,410
which is supposed to be in the "alt" attribute

89
00:05:42,490 --> 00:05:47,420
for all the images.

90
00:05:47,550 --> 00:05:49,710
So let's see what we get.

91
00:05:52,280 --> 00:05:56,940
We have scrolled down.

92
00:05:57,030 --> 00:06:02,270
OK, so you see that we're getting a key error "alt". Why is that?

93
00:06:02,370 --> 00:06:07,670
So the reason behind that is some images don't

94
00:06:02,370 --> 00:06:07,670
have captions and images which don't have captions

95
00:06:07,680 --> 00:06:12,670
are going to give us this exception

96
00:06:07,680 --> 00:06:12,670
that they don't contain this attribute.

97
00:06:12,690 --> 00:06:13,830
How do we take care of it?

98
00:06:13,920 --> 00:06:16,890
What we do is we have this in a "try catch" block.

99
00:06:17,430 --> 00:06:26,570
You say "try except", it's a key error and we

100
00:06:17,430 --> 00:06:26,570
say print "No caption for this image". Right.

101
00:06:27,800 --> 00:06:34,540
But the idea is that we're able to

102
00:06:27,800 --> 00:06:34,540
get the captions for all the images right.

103
00:06:35,200 --> 00:06:35,870
OK.

104
00:06:35,870 --> 00:06:37,540
So I'm going to run this again.

105
00:06:37,550 --> 00:06:39,980
Let me close this extra instance

106
00:06:39,980 --> 00:06:41,340
I have of Chrome.

107
00:06:41,630 --> 00:06:42,760
I'm going to run this again.

108
00:06:42,800 --> 00:06:49,520
And we have to make sure that we are able to get

109
00:06:42,800 --> 00:06:49,520
the captions for all the images and the images

110
00:06:49,520 --> 00:06:54,560
which don't have their captions we are going

111
00:06:49,520 --> 00:06:54,560
to get this line for them, that "No caption

112
00:06:54,560 --> 00:07:01,630
for this image" because we have a "try catch" block

113
00:06:54,560 --> 00:07:01,630
which is handling the key error part here.

114
00:07:01,640 --> 00:07:02,180
Right.

115
00:07:05,310 --> 00:07:11,120
Because a key is raised when a specific key is not found in a dictionary.

116
00:07:11,310 --> 00:07:15,170
That's why it's named as a key error

117
00:07:11,310 --> 00:07:15,170
because that key doesn't exist.

118
00:07:21,010 --> 00:07:21,270
OK.

119
00:07:21,290 --> 00:07:26,020
So we have scrolled down and anytime

120
00:07:26,040 --> 00:07:29,130
now we should be getting captions.

121
00:07:36,820 --> 00:07:43,170
OK, so you can see that we've got the captions for all

122
00:07:36,820 --> 00:07:43,170
of the images and the images which didn't have captions were

123
00:07:43,190 --> 00:07:46,290
like "No caption for this image", "No captions for this image".

124
00:07:47,170 --> 00:07:48,940
And it was downloading the images again.

125
00:07:48,970 --> 00:07:56,060
So I'm just going to stop it because we already

126
00:07:48,970 --> 00:07:56,060
done with that part and we know it works. Ok,

127
00:07:57,190 --> 00:08:00,490
So now that we have the captions what we want to do is... Oh, yes.

128
00:08:00,670 --> 00:08:06,930
The thing was this folder here this didn't exist

129
00:08:00,670 --> 00:08:06,930
before and you could see that it exists right now.

130
00:08:07,060 --> 00:08:07,920
And why is that?

131
00:08:07,930 --> 00:08:11,890
Because these two lines they ensure that happens.

132
00:08:11,950 --> 00:08:16,420
This line defines the path as we discussed before

133
00:08:16,450 --> 00:08:23,320
and these lines they ensure that if that path

134
00:08:16,450 --> 00:08:23,320
doesn't exist it makes sure that it exists now

135
00:08:23,320 --> 00:08:26,900
by creating the necessary folders in that path.

136
00:08:27,430 --> 00:08:28,600
I hope this is clear to you.

137
00:08:28,600 --> 00:08:33,660
Now what we want to discuss is how we are

138
00:08:28,600 --> 00:08:33,660
going to write captions to this path.

139
00:08:33,700 --> 00:08:41,740
So for right now the idea is to have a separate

140
00:08:33,700 --> 00:08:41,740
".txt" files for each caption like for each photo

141
00:08:41,740 --> 00:08:48,870
and its relevant caption in that ".txt" file.

142
00:08:41,740 --> 00:08:48,870
We can have the captions for that photo

143
00:08:48,880 --> 00:08:53,500
in that ".txt" file. Let's if we have

144
00:08:48,880 --> 00:08:53,500
31 images, we're going to have 31

145
00:08:53,520 --> 00:08:54,550
".txt" files.

146
00:08:54,820 --> 00:09:01,380
And they're going to contain the link

147
00:08:54,820 --> 00:09:01,380
and the caption for that image. OK.

148
00:09:01,430 --> 00:09:13,380
So we say "caption" is equals to "image['alt']" and

149
00:09:01,430 --> 00:09:13,380
the file path is supposed to be "os.path.join",

150
00:09:13,380 --> 00:09:22,170
"caption_path_folder" and actually before we

151
00:09:13,380 --> 00:09:22,170
decide the file path we need to know the file name.

152
00:09:22,210 --> 00:09:26,150
So let's keep it the same as we did in the images like caption.

153
00:09:26,210 --> 00:09:34,260
And I'm going to use index here and I'm going to "enumerate" it.

154
00:09:34,590 --> 00:09:36,460
So there you go.

155
00:09:40,390 --> 00:09:42,350
I'm going to have this in a "try catch" block

156
00:09:47,050 --> 00:09:51,390
and I'm just going to explain to you why I did that.

157
00:09:53,650 --> 00:09:58,600
OK, so index plus ".txt".

158
00:09:58,630 --> 00:10:02,940
We shouldn't forget the file extension. OK.

159
00:10:02,960 --> 00:10:04,350
And there you go.

160
00:10:04,370 --> 00:10:15,130
"file_name". Now I would like to elaborate as to

161
00:10:04,370 --> 00:10:15,130
why I have this caption in a separate "try catch"

162
00:10:15,180 --> 00:10:19,410
block and why not have all of this in a "try catch" block.

163
00:10:19,510 --> 00:10:24,580
So if I don't have a "try catch" block here like

164
00:10:19,510 --> 00:10:24,580
as I have right now and I was using my previous "try catch"

165
00:10:24,610 --> 00:10:30,160
block what was going to happen was that this

166
00:10:24,610 --> 00:10:30,160
first line was going to raise an exception

167
00:10:30,160 --> 00:10:36,160
any of this code would have been executed. Because

168
00:10:30,160 --> 00:10:36,160
we still want to create a file for those images

169
00:10:36,160 --> 00:10:42,010
which don't have a caption and you can just write

170
00:10:36,160 --> 00:10:42,010
that "No caption exists for this image".

171
00:10:42,030 --> 00:10:45,230
OK. OK, so now you have a file

172
00:10:45,240 --> 00:10:54,450
path. Right, now the next step is to make a file

173
00:10:45,240 --> 00:10:54,450
with the path and just write

174
00:10:54,450 --> 00:10:56,520
down the stuff necessary.

175
00:10:56,520 --> 00:10:58,640
That would be like the caption and the link.

176
00:10:58,720 --> 00:11:03,300
We can also get the link, "image['src']". OK.

177
00:11:07,600 --> 00:11:12,580
Now let's open this, open thi file

178
00:11:12,580 --> 00:11:13,180
path

179
00:11:16,220 --> 00:11:22,640
and "as file" I say "file.write".

180
00:11:22,660 --> 00:11:24,340
So what we want to write is

181
00:11:28,480 --> 00:11:41,370
the link, obviously link, and I say "str(link)" then I add

182
00:11:28,480 --> 00:11:41,370
a next line and then I can say "caption"

183
00:11:44,390 --> 00:11:46,130
and there we go.

184
00:11:48,850 --> 00:11:54,490
OK, so now let's run this and

185
00:11:48,850 --> 00:11:54,490
see if we're able to extract captions.

186
00:11:54,850 --> 00:12:02,580
I'm sorry, we were able to extract captions before.

187
00:11:54,850 --> 00:12:02,580
Let's see if we are able to write this captions to a ".txt" file. OK,

188
00:12:02,850 --> 00:12:10,870
so I'm running this now.

189
00:12:11,060 --> 00:12:12,190
It's opening Instagram.

190
00:12:24,390 --> 00:12:25,810
We have the news feed open,

191
00:12:29,070 --> 00:12:31,940
closing dialog box, opening target's profile,

192
00:12:35,900 --> 00:12:36,790
scrolling down,

193
00:12:44,600 --> 00:12:50,140
we have scrolled down now and any time now we

194
00:12:44,600 --> 00:12:50,140
should be getting captions. We should have included

195
00:12:50,140 --> 00:12:51,120
a print statement here.

196
00:12:51,130 --> 00:12:57,880
So we knew that yes, we are getting them but I guess

197
00:12:51,130 --> 00:12:57,880
I'm just going to open the captions folder and see

198
00:12:57,880 --> 00:12:59,200
if anything happens.

199
00:12:59,200 --> 00:12:59,830
There you go.

200
00:12:59,860 --> 00:13:01,140
Captions here ".txt".

201
00:13:01,230 --> 00:13:05,150
Just saw that we got that.

202
00:13:06,100 --> 00:13:06,420
OK.

203
00:13:06,420 --> 00:13:14,590
So an error has been raised, "TypeError: a

204
00:13:06,420 --> 00:13:14,590
bytes-like object is required not 'str'".

205
00:13:14,780 --> 00:13:22,340
The reason behind that is that if you open the file

206
00:13:14,780 --> 00:13:22,340
in binary mode and you would be wondering why I would

207
00:13:22,340 --> 00:13:23,570
do that.

208
00:13:23,600 --> 00:13:26,810
The reason behind that is that some of these

209
00:13:30,560 --> 00:13:31,730
have smileys

210
00:13:35,080 --> 00:13:40,000
and these smileys can't be encoded

211
00:13:35,080 --> 00:13:40,000
in the regular format we use.

212
00:13:40,000 --> 00:13:41,680
We have to encode them in Unicode.

213
00:13:41,710 --> 00:13:42,190
Right.

214
00:13:43,170 --> 00:13:46,670
So what I'm going to do is I'm just going to save

215
00:13:47,130 --> 00:13:49,560
all of this in binary format to a file.

216
00:13:49,590 --> 00:13:51,020
And it's going to take care of that.

217
00:13:51,040 --> 00:13:58,140
It's like whenever we view it, it might differ from

218
00:13:51,040 --> 00:13:58,140
system to system or there might be some

219
00:13:58,140 --> 00:14:07,020
cross dependency issues, not cross dependency, sorry,

220
00:13:58,140 --> 00:14:07,020
cross compatibility issues but it would work for most

221
00:14:07,020 --> 00:14:07,610
of you.

222
00:14:07,710 --> 00:14:16,870
And in moving forward, we are going to discuss how we

223
00:14:07,710 --> 00:14:16,870
to do this in Exel meaning the ".csv" file or an Excel file.

224
00:14:17,030 --> 00:14:19,970
And that's a different thing

225
00:14:20,000 --> 00:14:21,990
we are going to face this issue there.

226
00:14:22,350 --> 00:14:24,710
OK, so how do we take care of this.

227
00:14:24,710 --> 00:14:33,290
So what I do is all of this

228
00:14:24,710 --> 00:14:33,290
has a string and then I encode it and it

229
00:14:33,290 --> 00:14:37,170
is going to convert this to a byte-like object.

230
00:14:37,370 --> 00:14:38,600
I'm going to run this again

231
00:14:44,720 --> 00:14:44,960
and

232
00:14:48,570 --> 00:14:51,810
let's see if we're able to extract all the captions

233
00:14:51,810 --> 00:14:52,160
now.

234
00:15:02,400 --> 00:15:04,620
Logged in, opened target profile.

235
00:15:17,480 --> 00:15:20,790
So we should be getting captions any time now.

236
00:15:30,920 --> 00:15:31,600
There you go.

237
00:15:31,640 --> 00:15:33,310
You have the captions.

238
00:15:33,420 --> 00:15:40,760
If I open any of this, you can see content "tracking"

239
00:15:33,420 --> 00:15:40,760
and it says the link for this photo and if I open

240
00:15:40,790 --> 00:15:48,140
this you can see "View" and it has these

241
00:15:40,790 --> 00:15:48,140
smileys so it's downloading the images again.

242
00:15:48,150 --> 00:15:52,280
I'm just going to stop this because we've

243
00:15:48,150 --> 00:15:52,280
already done that part and it works.

244
00:15:53,110 --> 00:15:58,690
So you can see that we're able to download all the

245
00:15:53,110 --> 00:15:58,690
captions for all of the relevant images and we also

246
00:15:58,690 --> 00:16:05,880
mapped them, we have made sure that "image_1" is

247
00:15:58,690 --> 00:16:05,880
"caption_1" and also just before to show what you've

248
00:16:05,890 --> 00:16:06,280
done.

249
00:16:06,290 --> 00:16:09,290
You also included the image URL.

250
00:16:09,390 --> 00:16:13,300
So if I open this I would know that this image contained this

251
00:16:16,610 --> 00:16:20,240
caption and for any image which doesn't

252
00:16:16,610 --> 00:16:20,240
have it, which doesn't have a caption

253
00:16:20,670 --> 00:16:23,770
it is going to show us that it doesn't have a caption.

254
00:16:23,790 --> 00:16:29,810
I am not sure which image is that but there are

255
00:16:23,790 --> 00:16:29,810
a few images which don't have any captions.

256
00:16:31,830 --> 00:16:34,460
And for that we have the string

257
00:16:37,320 --> 00:16:43,410
which says "No caption exists for this

258
00:16:37,320 --> 00:16:43,410
image" and would have that there.

259
00:16:43,420 --> 00:16:48,250
I hope this video, made sense to you. In the next

260
00:16:43,420 --> 00:16:48,250
video, we're just going to discuss how we are going

261
00:16:48,250 --> 00:16:54,880
to make an Excel work book, an Excel sheet

262
00:16:48,250 --> 00:16:54,880
for the captions and we can map them there.

263
00:16:54,880 --> 00:17:10,780
It's more neat than opening 31 different files for the captions.

264
00:16:54,880 --> 00:17:10,780
Thank you!

