1
00:00:00,810 --> 00:00:06,930
Hello everyone! In this video, we're going

2
00:00:00,810 --> 00:00:06,930
to discuss two final "repeating things"

3
00:00:07,040 --> 00:00:15,510
characters and I will end the "repeating things" characters

4
00:00:07,040 --> 00:00:15,510
here in this video and I hope by the end of this

5
00:00:15,510 --> 00:00:22,540
video you are more confident to write expressions

6
00:00:15,510 --> 00:00:22,540
using these "repeating things" characters.

7
00:00:22,980 --> 00:00:25,080
So let's get started.

8
00:00:25,080 --> 00:00:28,530
The first character we have here is the question mark.

9
00:00:28,620 --> 00:00:33,050
So this question mark says the previous

10
00:00:28,620 --> 00:00:33,050
character can either come once or not at all.

11
00:00:33,240 --> 00:00:37,610
So I've written this RegEX expression. It says "a?b".

12
00:00:37,860 --> 00:00:39,380
This means that this a

13
00:00:39,420 --> 00:00:42,120
can either come once or not at all.

14
00:00:42,120 --> 00:00:51,790
So if say print "regex.match" and I have

15
00:00:42,120 --> 00:00:51,790
"b" here, it will run. It says

16
00:00:51,810 --> 00:00:52,250
"Yes,

17
00:00:52,260 --> 00:00:53,530
it's a match."

18
00:00:53,550 --> 00:00:54,870
Was it a match?

19
00:00:55,170 --> 00:00:59,490
Because this "a" optional, it can either come or not.

20
00:00:59,490 --> 00:01:02,640
So if I have one single "a" here, it still is a match.

21
00:01:02,910 --> 00:01:09,260
But if I have another "a" here, it says

22
00:01:02,910 --> 00:01:09,260
"None". What does it say that?

23
00:01:09,360 --> 00:01:17,520
Because this question mark depicts 0 or 1. It says minimum is zero,

24
00:01:18,570 --> 00:01:29,810
maximum is one. OK, so this was the question mark character.

25
00:01:30,100 --> 00:01:33,400
And lastly going to move to this character here,

26
00:01:33,410 --> 00:01:36,670
these curly braces.

27
00:01:36,700 --> 00:01:43,440
You could say you can implement any of the

28
00:01:36,700 --> 00:01:43,440
"repeating things" characters from these curly

29
00:01:44,800 --> 00:01:45,700
braces.

30
00:01:45,910 --> 00:01:48,370
So these curly braces expect two parameters.

31
00:01:48,400 --> 00:01:58,070
They are integer values, "m" and "n", so "m" means that the previous character which

32
00:01:58,160 --> 00:02:04,610
is (inaudible), will have at least "m" repetitions and at the most

33
00:02:04,950 --> 00:02:06,900
"n" repetitions.

34
00:02:06,960 --> 00:02:09,240
So what do I mean by that.

35
00:02:09,260 --> 00:02:15,930
I'll just explain this with one example

36
00:02:09,260 --> 00:02:15,930
and I hope I can clear things up.

37
00:02:15,930 --> 00:02:18,100
So let's say I have this "a" here.

38
00:02:18,260 --> 00:02:24,380
So what I do as I say "a" and I say zero.

39
00:02:24,390 --> 00:02:32,380
Let's say I want this "a" to come at least two

40
00:02:24,390 --> 00:02:32,380
times and at most four times. So I do this, "a{}".

41
00:02:32,430 --> 00:02:36,150
This is my minimum repetition and this is my maximum repetition.

42
00:02:36,150 --> 00:02:46,250
So this is going to accept values of "aa", "aaa" and

43
00:02:36,150 --> 00:02:46,250
"aaa". Not more than and not less than that.

44
00:02:46,270 --> 00:02:58,500
If I say print "regex.match('a')", if I do this, it says

45
00:02:46,270 --> 00:02:58,500
me "None" because it expects at least two repetitions

46
00:02:58,500 --> 00:02:59,780
of this "a" character.

47
00:02:59,960 --> 00:03:03,330
So if I have one more "a", it gives me a match.

48
00:03:03,450 --> 00:03:09,070
So if I have three "a", it still gives me a match

49
00:03:03,450 --> 00:03:09,070
because this expects minimum two and maximum four

50
00:03:09,100 --> 00:03:11,080
repetitions. So if it's four,

51
00:03:11,100 --> 00:03:12,380
it still gives me a match.

52
00:03:12,390 --> 00:03:19,330
But as it is going to five, it is still getting me a

53
00:03:12,390 --> 00:03:19,330
match but it's only giving me a match for the first four

54
00:03:19,350 --> 00:03:24,290
characters, not the first five characters. You can see that here.

55
00:03:24,380 --> 00:03:27,720
So the first parameter is the

56
00:03:27,760 --> 00:03:34,130
minimum repetitions you want and the

57
00:03:27,760 --> 00:03:34,130
next one is the maximum repetitions you want.

58
00:03:34,150 --> 00:03:40,150
So the thing with these curly braces is that we can

59
00:03:34,150 --> 00:03:40,150
implement any "repeating thing" character we've discussed

60
00:03:40,150 --> 00:03:41,640
before using these.

61
00:03:41,860 --> 00:03:44,230
Let's say I want to implement this asterisk.

62
00:03:44,230 --> 00:03:51,040
So what I can do is I can use

63
00:03:44,230 --> 00:03:51,040
these curly braces with the following

64
00:03:51,040 --> 00:03:51,950
syntax.

65
00:03:52,150 --> 00:03:58,360
So I'll say for minimum at zero and for maximum

66
00:03:52,150 --> 00:03:58,360
it leaves the field blank. If I leave it blank,

67
00:03:58,450 --> 00:04:02,050
it means that it expectes infinite boundary this way.

68
00:04:03,050 --> 00:04:10,270
So if I say "regex" is equals to "re.compile" and I say "a{0,}"

69
00:04:10,350 --> 00:04:14,880
and this. So say print "regex.match",

70
00:04:19,650 --> 00:04:21,750
it gives me a match.

71
00:04:21,790 --> 00:04:23,040
It still gives me a match.

72
00:04:23,070 --> 00:04:29,920
And I can have as many values I want and that still gives me a match. OK,

73
00:04:30,500 --> 00:04:38,000
so the thing about this was leaving it blank was

74
00:04:30,500 --> 00:04:38,000
that if I leave the first value blank that means

75
00:04:38,210 --> 00:04:39,450
that by default

76
00:04:39,640 --> 00:04:41,600
it is expected to be 0.

77
00:04:41,690 --> 00:04:48,590
If I leave the first value blank. And if I leave the

78
00:04:41,690 --> 00:04:48,590
second blank that by default means that it expects

79
00:04:48,710 --> 00:04:54,180
an infinite value there. So for plus I have "{1,}".

80
00:04:54,310 --> 00:05:01,020
So this blank depicts an infinite value which means that

81
00:04:54,310 --> 00:05:01,020
the previous character again have at most infinite

82
00:05:01,120 --> 00:05:03,620
repetitions. And for question mark,

83
00:05:03,640 --> 00:05:07,170
I have zero and one.

84
00:05:07,270 --> 00:05:14,910
I want you to write these expressions and I want you to use curly braces and

85
00:05:15,910 --> 00:05:24,040
for learning how we implement them and have

86
00:05:15,910 --> 00:05:24,040
different expressions which are equal to this last

87
00:05:24,430 --> 00:05:30,370
character here and this question mark, and the asterisk

88
00:05:24,430 --> 00:05:30,370
one that you were familiar with repeating Regular

89
00:05:30,370 --> 00:05:35,380
Expressions and how we can handle them and

90
00:05:30,370 --> 00:05:35,380
how we can write complex Regular Expressions.

91
00:05:36,300 --> 00:05:39,080
So thank you very much.

92
00:05:39,210 --> 00:05:40,220
I'll see you soon.

93
00:05:40,300 --> 00:05:40,860
Thank you.

