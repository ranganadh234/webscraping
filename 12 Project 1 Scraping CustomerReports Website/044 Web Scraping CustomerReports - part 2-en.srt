1
00:00:00,620 --> 00:00:02,010
Hello everyone!

2
00:00:02,230 --> 00:00:10,060
In the last video, we saw how we can scrape these product names from this HTML page.

3
00:00:10,070 --> 00:00:20,030
Now as you can see that each product, if I

4
00:00:10,070 --> 00:00:20,030
open it, like it's a link which opens to another page.

5
00:00:20,040 --> 00:00:27,360
So what I want to do here is I want to be

6
00:00:20,040 --> 00:00:27,360
able to scrape the links for these products.

7
00:00:27,420 --> 00:00:30,960
So I mean like each of them is a link.

8
00:00:30,960 --> 00:00:40,360
If I say "Inspect Element", you can see it says me an "a"

9
00:00:30,960 --> 00:00:40,360
tag and it gives me a link here which I can open.

10
00:00:40,370 --> 00:00:47,650
So I'm here in this "Best Athletic Shoe Buying Guide"

11
00:00:40,370 --> 00:00:47,650
and then here in this "Best Baby Bathtub Buying Guide".

12
00:00:47,670 --> 00:00:51,930
So there are separate links which I can open.

13
00:00:51,930 --> 00:01:02,670
Now what I want is I want the names as well

14
00:00:51,930 --> 00:01:02,670
as the links for each of my products here like what

15
00:01:02,670 --> 00:01:06,300
link do I have for baby bathtubs.

16
00:01:06,350 --> 00:01:11,660
So what I can do is I can have a dictionary.

17
00:01:11,660 --> 00:01:22,090
I can have a dictionary of products and I say "products" is

18
00:01:11,660 --> 00:01:22,090
equals to this and now a dictionary could be like

19
00:01:22,960 --> 00:01:29,340
product name is key and the product

20
00:01:31,790 --> 00:01:36,100
link is the value. OK.

21
00:01:36,100 --> 00:01:39,190
So how do we get this.

22
00:01:39,270 --> 00:01:41,840
How do we get these "a" tags.

23
00:01:41,850 --> 00:01:43,630
So that's the first task.

24
00:01:43,770 --> 00:01:52,290
If you remember you know like how we managed to get the the name tags in

25
00:01:52,290 --> 00:01:59,570
our previous video where we said that all of these products are under this "div"

26
00:01:59,630 --> 00:02:02,030
which has class "entry-letter".

27
00:02:02,040 --> 00:02:06,890
So what we did was we found all that divs which had the class "entry-letter"

28
00:02:07,080 --> 00:02:12,730
and then we extracted the string from this "span" tag.

29
00:02:12,990 --> 00:02:22,400
After getting these divs. So we are going to do

30
00:02:12,990 --> 00:02:22,400
the same thing, I'm going to say "div.div.a.span.string

31
00:02:24,080 --> 00:02:40,280
for div in soup.find_all" and then I say

32
00:02:24,080 --> 00:02:40,280
"div" and it has class equals to "entry-letter".

33
00:02:40,320 --> 00:02:42,540
So this gives me product names

34
00:02:48,530 --> 00:02:49,440
"product_names".

35
00:02:50,890 --> 00:03:01,320
So if I say "for product in product_names" and if I

36
00:02:50,890 --> 00:03:01,320
print "product", you can see I have the names here.

37
00:03:02,750 --> 00:03:11,150
So this line here gives me the product names

38
00:03:02,750 --> 00:03:11,150
of all the products which are listed

39
00:03:11,150 --> 00:03:17,100
on this HTML page. OK, so now that I have the names

40
00:03:11,150 --> 00:03:17,100
of the products which are listed here, what

41
00:03:17,100 --> 00:03:20,270
I want now is I want the links to these products.

42
00:03:20,520 --> 00:03:22,330
So as you can see what

43
00:03:22,410 --> 00:03:28,730
I was doing here was I was saying "div.div.a.span",

44
00:03:22,410 --> 00:03:28,730
I had this "a" tag here and this "a" tag

45
00:03:28,780 --> 00:03:39,950
contains the link to that product. So I can say

46
00:03:28,780 --> 00:03:39,950
"product_links" is equals to "div.div.a"

47
00:03:39,950 --> 00:03:48,290
and I could either use a function or a dictionary value, and then

48
00:03:39,950 --> 00:03:48,290
I could say "href" and "for div in soup.find_all()"

49
00:03:48,310 --> 00:03:54,680
"div", and "class_" is equals to "entry-letter"

50
00:03:57,490 --> 00:04:01,020
so "for link in product_links"

51
00:04:03,860 --> 00:04:05,250
and if I print "link".

52
00:04:07,260 --> 00:04:12,720
It gives me the link to all of the products which are mentioned here.

53
00:04:12,730 --> 00:04:17,760
So what I did was I just walk through this again.

54
00:04:17,830 --> 00:04:23,980
And I find that the "entry-letter" div, which is

55
00:04:17,830 --> 00:04:23,980
this, and I get to this "div" and then to this

56
00:04:24,030 --> 00:04:24,710
"a" tag.

57
00:04:24,940 --> 00:04:29,080
And then this "a" tag contains the link to this product.

58
00:04:29,140 --> 00:04:31,310
So I say "div.div.a".

59
00:04:31,390 --> 00:04:35,100
And then I get the link which is in this "href" attribute.

60
00:04:35,580 --> 00:04:43,360
And I make a list out of this and in this list I have the links for each

61
00:04:43,360 --> 00:04:45,180
of the products that are listed here.

62
00:04:46,120 --> 00:04:52,960
Now another way to do this could be using

63
00:04:46,120 --> 00:04:52,960
a dictionary, we could say "products"

64
00:04:52,960 --> 00:05:02,410
is equal to "div.div.a.span.string" and

65
00:04:52,960 --> 00:05:02,410
then I say "div.div.a['href']

66
00:05:04,690 --> 00:05:08,660
for div in soup.find_all"

67
00:05:11,450 --> 00:05:12,490
and then I say "div",

68
00:05:12,520 --> 00:05:17,670
I say "class_='entry-letter-".

69
00:05:21,370 --> 00:05:35,900
Now when I run this, I say "for key.value

70
00:05:21,370 --> 00:05:35,900
in products.items()", print "key"

71
00:05:38,630 --> 00:05:39,750
and then I say

72
00:05:44,100 --> 00:05:53,380
"value". So if I run this, you can see it gives me

73
00:05:44,100 --> 00:05:53,380
the name of the product and the link and

74
00:05:53,380 --> 00:05:56,900
the relevant link to that product.

75
00:05:56,900 --> 00:06:01,430
So what did I do was I used dictionary comprehension.

76
00:06:01,670 --> 00:06:03,450
This here is the key,

77
00:06:03,670 --> 00:06:06,510
it is the product name as you can see here,

78
00:06:07,900 --> 00:06:15,850
and this here is the value of this column which is the

79
00:06:07,900 --> 00:06:15,850
link against that product name which we which

80
00:06:15,850 --> 00:06:22,740
we just found here in "product_links". So then I

81
00:06:15,850 --> 00:06:22,740
say "for div in soup.find_all" and I find all the divs

82
00:06:22,740 --> 00:06:26,310
that have the class "entry-letter". And then this

83
00:06:26,360 --> 00:06:31,560
loop, this returns me all the divs which

84
00:06:26,360 --> 00:06:31,560
have the class "entry-letter".

85
00:06:31,580 --> 00:06:37,310
And then I iterate through them and then I

86
00:06:31,580 --> 00:06:37,310
get the desired values. The first desired

87
00:06:37,310 --> 00:06:43,220
value is a string of the name of the product

88
00:06:37,310 --> 00:06:43,220
which is the string in "span" which I have here.

89
00:06:44,200 --> 00:06:50,350
And then the other is the link to that

90
00:06:44,200 --> 00:06:50,350
product which is here, "div.div.a['href']",

91
00:06:50,380 --> 00:06:52,370
and then I just print them.

92
00:06:52,460 --> 00:06:59,490
So I hope this is clear to you and if you want

93
00:06:52,460 --> 00:06:59,490
to scrape something from these links

94
00:06:59,490 --> 00:07:04,300
what I could do was I have the list, I could

95
00:06:59,490 --> 00:07:04,300
just open them and then I could scrape them.

96
00:07:04,730 --> 00:07:07,350
Scrape whatever I want to from them.

97
00:07:07,690 --> 00:07:11,380
So this is the basic idea of how we can do this.

98
00:07:11,530 --> 00:07:13,710
And there are many different ways that you can achieve this.

99
00:07:13,720 --> 00:07:16,600
And I mean this is just one way of doing this.

100
00:07:17,080 --> 00:07:23,340
OK, so now we are going to move towards

101
00:07:17,080 --> 00:07:23,340
a project which I'm going to give you.

102
00:07:23,620 --> 00:07:30,610
And in the next video, we are going to discuss what I

103
00:07:23,620 --> 00:07:30,610
want you to do for this project and I hope what I explained

104
00:07:30,610 --> 00:07:38,350
in this video is clear to you and now you understand

105
00:07:30,610 --> 00:07:38,350
better how we can organize our data and how we can

106
00:07:38,380 --> 00:07:44,830
extract different things using the same "for" loop here.

107
00:07:44,910 --> 00:07:52,070
You know, here in this statement, we are extracting

108
00:07:44,910 --> 00:07:52,070
two different things, using a single "for" loop.

109
00:07:52,150 --> 00:07:55,470
We're iterating over a single list and extracting multiple things.

110
00:07:55,780 --> 00:08:01,010
I mean the other way to do this was that I

111
00:07:55,780 --> 00:08:01,010
had to call this method two times and that just creates

112
00:08:01,060 --> 00:08:05,110
complexity that's in trees that are very, very, very, very large.

113
00:08:05,110 --> 00:08:10,750
So I would try to avoid that. I would

114
00:08:05,110 --> 00:08:10,750
try to avoid calling the "soup.find_all" function because then

115
00:08:10,750 --> 00:08:17,280
it has to recursively search my whole parse tree

116
00:08:10,750 --> 00:08:17,280
which is expensive in terms of memory and time.

117
00:08:17,310 --> 00:08:19,930
And this does only once.

118
00:08:19,930 --> 00:08:23,270
So this is better than doing this two times.

119
00:08:23,400 --> 00:08:28,580
OK, so I hope this is clear to you. In the next video, I'm going to

120
00:08:23,400 --> 00:08:28,580
explain more about the project what I want you to do.

121
00:08:29,020 --> 00:08:30,160
Thank you very much.

122
00:08:30,250 --> 00:08:31,800
See you in the next video. Bye.

