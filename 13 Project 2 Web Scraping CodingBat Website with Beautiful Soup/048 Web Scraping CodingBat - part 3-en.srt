1
00:00:01,100 --> 00:00:02,660
Hello everyone.

2
00:00:03,110 --> 00:00:09,500
So in the first part what we did was we

3
00:00:03,110 --> 00:00:09,500
got the links for each of these categories here

4
00:00:09,530 --> 00:00:16,550
which we have for Java like "Warmup-1", "Warmup-2",

5
00:00:09,530 --> 00:00:16,550
"String-1", "Array-1", "Array-2", "Array-3", "Recursion".

6
00:00:16,580 --> 00:00:25,040
So in part two, our last video, what we did

7
00:00:16,580 --> 00:00:25,040
was we opened each category and we got the links for

8
00:00:25,070 --> 00:00:27,190
each of these questions here.

9
00:00:27,420 --> 00:00:33,150
Like "sleepIn", "diff21", "parrotTrouble", "icyHot", "front22",

10
00:00:33,160 --> 00:00:42,060
all of this. So what we did was we had

11
00:00:33,160 --> 00:00:42,060
a loop and we opened each category and in

12
00:00:42,120 --> 00:00:46,200
each category what we did was we had the question links.

13
00:00:46,200 --> 00:00:51,930
Like I got all of the questions here, the

14
00:00:46,200 --> 00:00:51,930
links for each of the question here

15
00:00:51,930 --> 00:00:53,450
in this list there.

16
00:00:53,730 --> 00:01:00,210
And then what I'm doing is I'm running

17
00:00:53,730 --> 00:01:00,210
a "for" loop and printing each question.

18
00:01:00,210 --> 00:01:05,240
So this is going to run and give me the

19
00:01:00,210 --> 00:01:05,240
question links for the very first category.

20
00:01:05,250 --> 00:01:08,920
So here they are all of them.

21
00:01:09,010 --> 00:01:18,070
So now the next step is what we want to do is we want

22
00:01:09,010 --> 00:01:18,070
to open each question and we want to get the problem

23
00:01:18,070 --> 00:01:24,430
statement here and the examples associated with that.

24
00:01:24,920 --> 00:01:32,390
So these examples are like the sample function prototypes

25
00:01:24,920 --> 00:01:32,390
which indicate the input data for this function

26
00:01:32,480 --> 00:01:34,270
and the output

27
00:01:34,280 --> 00:01:36,770
this function should return.

28
00:01:36,790 --> 00:01:39,010
So how do we go about this now.

29
00:01:39,060 --> 00:01:50,460
So what we are going to do here now that I have the

30
00:01:39,060 --> 00:01:50,460
question links for each category, now I say "for

31
00:01:51,390 --> 00:01:52,260
question_link

32
00:01:56,750 --> 00:01:58,010
in question_links".

33
00:02:01,450 --> 00:02:08,810
So I'm going to open this "final_page". I say "request.get", I "question_link".

34
00:02:08,840 --> 00:02:17,770
Now that I have the "final_page" and I'm going

35
00:02:08,840 --> 00:02:17,770
to make the "final_soup" of this. I say

36
00:02:21,490 --> 00:02:30,380
"BeautifulSoup", "final_page.content" and then the parser here.

37
00:02:30,460 --> 00:02:38,530
So now that I have made the soup out of this

38
00:02:30,460 --> 00:02:38,530
page then the final step here is actually getting

39
00:02:39,290 --> 00:02:41,480
this problem statement here

40
00:02:41,530 --> 00:02:49,300
and then the example to see it. So let's just

41
00:02:41,530 --> 00:02:49,300
review the HTML structure for this page.

42
00:02:49,320 --> 00:02:51,580
So I say "Inspect Element".

43
00:02:51,750 --> 00:03:01,680
And if I go here, you can see that I have the problem

44
00:02:51,750 --> 00:03:01,680
statement here in this div "minh" and if I move

45
00:03:01,770 --> 00:03:02,640
upwards,

46
00:03:05,390 --> 00:03:13,400
if I move upwards like if I get to here, this "div",

47
00:03:05,390 --> 00:03:13,400
this "div class='indent'", I can see that in encapsulates

48
00:03:13,410 --> 00:03:18,420
the whole screen almost like the part where the problem statement is

49
00:03:18,440 --> 00:03:20,090
and the examples are.

50
00:03:20,480 --> 00:03:28,370
So what I'm going to do right now is I'm going to

51
00:03:20,480 --> 00:03:28,370
try and access this "div" here which

52
00:03:28,370 --> 00:03:29,550
has its class "indent".

53
00:03:29,570 --> 00:03:32,470
And let's see if I can find it or not.

54
00:03:32,480 --> 00:03:51,160
So I say "indent_div" is equals to "final_soup.find", "div",

55
00:03:32,480 --> 00:03:51,160
attributes, "class" and "indent", and then I say print

56
00:03:51,390 --> 00:03:58,600
"indent_div" and I say "break" so because I don't

57
00:03:51,390 --> 00:03:58,600
really want to open this for each question because this is supposed

58
00:03:58,740 --> 00:04:00,550
to be the same for each question.

59
00:04:00,760 --> 00:04:05,950
So let's just run this and see what we have.

60
00:04:05,950 --> 00:04:08,740
Now we know that we are moving to the right direction or not.

61
00:04:14,090 --> 00:04:21,140
Ok, so I stopped this myself because we didn't have a

62
00:04:14,090 --> 00:04:21,140
"break" for this here and then what it was doing

63
00:04:21,140 --> 00:04:26,000
was it was opening this for each category and we don't really want that.

64
00:04:26,000 --> 00:04:28,730
So I'm using "break" here as well.

65
00:04:29,090 --> 00:04:31,540
OK, so maybe I can just run this again.

66
00:04:31,640 --> 00:04:34,090
Just so everything is good.

67
00:04:36,580 --> 00:04:42,990
OK, so you can see now that I have this

68
00:04:36,580 --> 00:04:42,990
"div" class in them and its child

69
00:04:42,990 --> 00:04:48,750
is this "a href" and this anchor tag which has "href" value this.

70
00:04:49,150 --> 00:04:56,710
And if I go here and I see "Yes" like I am getting

71
00:04:49,150 --> 00:04:56,710
the right "div" tag here. So good right now.

72
00:04:56,710 --> 00:05:02,120
Now what I want to do is I want to get to the problem statement

73
00:04:56,710 --> 00:05:02,120
here the problem statement is here and

74
00:05:02,130 --> 00:05:04,080
that "div" we have right now is here.

75
00:05:04,080 --> 00:05:08,520
So how do we to our problem statement.

76
00:05:08,610 --> 00:05:10,760
We can see that this "div" has a "table".

77
00:05:10,770 --> 00:05:21,610
So how about just navigating down our parse tree.

78
00:05:10,770 --> 00:05:21,610
So I can say print "indent_div.table" and let's run this

79
00:05:21,730 --> 00:05:23,870
and see if I can get to "table" here.

80
00:05:27,180 --> 00:05:34,350
OK, so I have a "table" and it has a "tr" and a "td" and

81
00:05:27,180 --> 00:05:34,350
then and another "div" and I guess this is a problem

82
00:05:34,350 --> 00:05:36,100
statement, "the parameter weekdays is

83
00:05:36,110 --> 00:05:37,880
true". Yes.

84
00:05:37,920 --> 00:05:40,010
This is the problem statement.

85
00:05:40,020 --> 00:05:42,660
So we are getting the "table" now.

86
00:05:42,690 --> 00:05:48,740
I mean what I did was I said "div.table" to get it

87
00:05:42,690 --> 00:05:48,740
down my parse tree. So right now I stand here at this

88
00:05:48,740 --> 00:05:50,460
"table" tag.

89
00:05:50,530 --> 00:05:56,180
So now I want to move downwards and I want

90
00:05:50,530 --> 00:05:56,180
to access this problem statement.

91
00:05:56,200 --> 00:05:58,590
I say "table".

92
00:05:58,840 --> 00:06:01,180
How about let's jump to this "div" directly.

93
00:06:01,180 --> 00:06:05,050
I mean there is no "div" before this so we should be good to go.

94
00:06:05,440 --> 00:06:12,600
So I say "table.div" and let's print

95
00:06:05,440 --> 00:06:12,600
this and see if we can get this done.

96
00:06:16,000 --> 00:06:17,710
OK, so I think we are good.

97
00:06:17,710 --> 00:06:23,710
I have this "div", "div class='minh'". You can see

98
00:06:17,710 --> 00:06:23,710
that it is actually giving me the problem statement

99
00:06:24,780 --> 00:06:32,510
so I can just say ".div.string" and this should

100
00:06:24,780 --> 00:06:32,510
return me only the problem statement minus the

101
00:06:32,570 --> 00:06:33,040
tags.

102
00:06:36,460 --> 00:06:36,950
Great.

103
00:06:36,950 --> 00:06:38,560
So we have the problem statement.

104
00:06:38,550 --> 00:06:49,780
So I think it's safe to say the

105
00:06:38,550 --> 00:06:49,780
"problem_statement" is equals to "indent_div.table

106
00:06:49,880 --> 00:06:53,170
.div.string".

107
00:06:53,280 --> 00:06:59,830
And just to be sure, I can just print

108
00:06:53,280 --> 00:06:59,830
this again and see if we're good or not.

109
00:07:05,030 --> 00:07:10,620
So we have successfully scraped the problem statement from this page here.

110
00:07:10,640 --> 00:07:15,820
Now the next step is we want to get these examples too.

111
00:07:16,250 --> 00:07:18,050
So how do we go about this now.

112
00:07:18,050 --> 00:07:25,510
So if I'm able to access this "div" tags and

113
00:07:18,050 --> 00:07:25,510
I want to access these three examples.

114
00:07:26,090 --> 00:07:28,270
So I assume that...

115
00:07:28,280 --> 00:07:33,020
I think it's OK to assume that these are

116
00:07:28,280 --> 00:07:33,020
the siblings of this "div" here right.

117
00:07:33,080 --> 00:07:36,020
Because I mean they're all children of

118
00:07:36,230 --> 00:07:40,780
"td" and there's this "div" and there's this "br" and these strings

119
00:07:40,890 --> 00:07:42,340
are at the same level.

120
00:07:42,620 --> 00:07:43,920
So they're siblings.

121
00:07:44,090 --> 00:07:45,520
So how about I say

122
00:07:49,960 --> 00:07:51,420
"siblings_of_statement"

123
00:07:55,970 --> 00:08:01,440
is equals to

124
00:08:09,690 --> 00:08:13,100
"indent_div.table.div.next_siblings".

125
00:08:13,170 --> 00:08:24,400
So this should return me a generator object

126
00:08:13,170 --> 00:08:24,400
because the "next_siblings" method returns

127
00:08:24,400 --> 00:08:25,580
me a generator object.

128
00:08:25,580 --> 00:08:30,400
I can just print it to be sure that what I'm doing is right.

129
00:08:31,010 --> 00:08:34,600
I say print "siblings_of_statement" and if I run this now

130
00:08:40,910 --> 00:08:44,020
it just returned me a generator object.

131
00:08:44,020 --> 00:08:45,930
I can just loop through this.

132
00:08:46,000 --> 00:08:56,280
I can say "for sibling in siblings_of_statement",

133
00:08:46,000 --> 00:08:56,280
print "sibling" and let's remove this and let's run

134
00:08:56,280 --> 00:09:04,330
this and see if we're able to access the siblings and

135
00:08:56,280 --> 00:09:04,330
if these examples are the siblings of our problem

136
00:09:04,330 --> 00:09:11,490
statement, or this "div" here which has its class

137
00:09:04,330 --> 00:09:11,490
"minh". I think we are successful here.

138
00:09:11,490 --> 00:09:14,940
I'm getting the "br" tag and I am also getting the examples here.

139
00:09:14,940 --> 00:09:17,670
You can see them right here.

140
00:09:17,880 --> 00:09:23,810
But there's also a lot of unnecessary

141
00:09:17,880 --> 00:09:23,810
garbage here which we don't really want.

142
00:09:24,420 --> 00:09:26,380
OK, so how do we filter this.

143
00:09:26,430 --> 00:09:28,240
Something like that.

144
00:09:28,480 --> 00:09:36,770
The this "br" tag doesn't really has anything for its ".string".

145
00:09:36,770 --> 00:09:38,990
So let's say if

146
00:09:42,090 --> 00:09:48,560
"sibling.string" is not "None".

147
00:09:49,340 --> 00:09:57,470
The ".string" method, we are going to see that if the tag

148
00:09:49,340 --> 00:09:57,470
the which we are accessing right now which is a sibling

149
00:09:57,520 --> 00:10:06,590
of our main "div" here, this main "div" here, if it has

150
00:09:57,520 --> 00:10:06,590
a string object associated with it then

151
00:10:06,710 --> 00:10:07,460
we are going to print it

152
00:10:07,460 --> 00:10:09,760
else you are not going to print it.

153
00:10:09,890 --> 00:10:14,620
Let's just run this and see if we can get this working.

154
00:10:14,630 --> 00:10:16,960
So this is working great.

155
00:10:16,960 --> 00:10:23,360
And you can see that what I have here is that I have the

156
00:10:16,960 --> 00:10:23,360
examples which we really wanted the three examples

157
00:10:24,110 --> 00:10:25,520
and I'm getting and

158
00:10:25,580 --> 00:10:31,710
what I did was

159
00:10:37,400 --> 00:10:38,530
if I don't to use this...

160
00:10:38,540 --> 00:10:43,490
So what was happening was that I was getting all the

161
00:10:38,540 --> 00:10:43,490
siblings of the main "div" here and which I didn't

162
00:10:43,490 --> 00:10:48,660
really want and I don't want this "br", I don't

163
00:10:43,490 --> 00:10:48,660
want this "p" tag here, I don't want this "form"

164
00:10:48,660 --> 00:10:49,180
tag here.

165
00:10:49,190 --> 00:10:51,910
I don't want these "script" tags here.

166
00:10:51,980 --> 00:10:53,450
So how do we get rid of them.

167
00:10:53,450 --> 00:10:57,710
So what I did was I made an observation.

168
00:10:57,710 --> 00:11:03,930
I saw that this "br" tag does not have a string object

169
00:10:57,710 --> 00:11:03,930
associated with it, this "p" tag

170
00:11:03,930 --> 00:11:06,750
is the same, the "button" tag is the same.

171
00:11:06,830 --> 00:11:15,350
So they don't have strings is associated with

172
00:11:06,830 --> 00:11:15,350
them so why not just try and see if "sibling.string"

173
00:11:16,370 --> 00:11:18,180
is not "None".

174
00:11:19,710 --> 00:11:20,550
And print "sibling".

175
00:11:20,740 --> 00:11:28,570
So I tried this and I found that I was actually able

176
00:11:20,740 --> 00:11:28,570
to get the examples and it worked perfectly.

177
00:11:28,570 --> 00:11:30,940
So what I can do now as I can say

178
00:11:34,110 --> 00:11:49,890
"examples" is equals to "sibling for siblings".

179
00:11:52,870 --> 00:12:02,910
if "sibling.string" is not "None".

180
00:12:03,010 --> 00:12:12,250
And now what I can do is I can just print this "for example in the examples",

181
00:12:15,360 --> 00:12:23,490
print and if I run this now I should give examples the three here.

182
00:12:23,520 --> 00:12:24,800
So this is working great.

183
00:12:24,900 --> 00:12:32,300
So now what we have here is that we are accessing the problem statement and

184
00:12:32,440 --> 00:12:39,280
we are also successfully retrieving three

185
00:12:32,440 --> 00:12:39,280
examples associated with this problem statement.

186
00:12:39,300 --> 00:12:44,670
I can just print both of them here I can say print "problem_statement"

187
00:12:47,370 --> 00:12:49,090
and we should be good to go now.

188
00:12:49,470 --> 00:12:53,120
I should have the problem statement first and an example associated with it.

189
00:12:53,220 --> 00:13:00,850
So you can see that I have the problem statement and then examples associated with that.

190
00:13:00,850 --> 00:13:04,060
So this ends our project.

191
00:13:04,060 --> 00:13:13,810
I'm just going to remove the "break" tags here and

192
00:13:04,060 --> 00:13:13,810
now what this is going to do is this is going to run

193
00:13:13,990 --> 00:13:22,980
this for each category and each question and it might

194
00:13:13,990 --> 00:13:22,980
take some time to it might take

195
00:13:23,050 --> 00:13:27,540
some time to actually successfully run this.

196
00:13:27,550 --> 00:13:30,940
I mean considering that it will have to open a lot of pages.

197
00:13:31,210 --> 00:13:38,570
So I'm just going to add another print statement here

198
00:13:31,210 --> 00:13:38,570
to differentiate between different questions and

199
00:13:38,570 --> 00:13:40,970
the are examples.

200
00:13:41,120 --> 00:13:46,180
So I'm just going to run this and we

201
00:13:41,120 --> 00:13:46,180
will see that it's working great.

202
00:13:46,660 --> 00:13:54,750
OK, so what we have achieved now is that

203
00:13:46,660 --> 00:13:54,750
we were able to get the categories,

204
00:13:55,820 --> 00:14:01,800
we were able to scrape the categories first,

205
00:13:55,820 --> 00:14:01,800
each category, the link for each category and

206
00:14:01,800 --> 00:14:06,880
then we open each category and found the links

207
00:14:01,800 --> 00:14:06,880
for each question that category contained.

208
00:14:06,900 --> 00:14:12,600
So then we open each question and then we successfully

209
00:14:06,900 --> 00:14:12,600
scraped the problem statement and the example

210
00:14:12,600 --> 00:14:15,340
associated with that.

211
00:14:15,340 --> 00:14:18,130
So this is how to work and you can see that it's working great.

212
00:14:18,150 --> 00:14:24,750
I'm getting the problem statement first

213
00:14:18,150 --> 00:14:24,750
and then the examples associated with that and it

214
00:14:24,750 --> 00:14:28,430
will take some time. You can see that

215
00:14:24,750 --> 00:14:28,430
because it has to open a lot of questions.

216
00:14:28,470 --> 00:14:34,260
And I mean it is going to run for each category and for

217
00:14:28,470 --> 00:14:34,260
each question in each category so that's a lot

218
00:14:34,260 --> 00:14:35,390
actually.

219
00:14:35,400 --> 00:14:39,450
So just let it run and you'll see that it's like we're good here.

220
00:14:39,450 --> 00:14:40,590
So don't worry about it

221
00:14:40,620 --> 00:14:42,230
if it takes a lot of time.

222
00:14:42,620 --> 00:14:43,110
OK.

223
00:14:43,220 --> 00:14:49,710
So I'll see you in the next video. I hope that we have

224
00:14:43,220 --> 00:14:49,710
successfully completed this project and you

225
00:14:49,710 --> 00:14:50,990
don't have any queries.

226
00:14:51,960 --> 00:14:53,700
Thank you very much.

227
00:14:53,770 --> 00:14:54,690
See you in the next video.

