1
00:00:01,560 --> 00:00:07,700
Hello everyone! In this video, we

2
00:00:01,560 --> 00:00:07,700
are going to discuss XPath expressions.

3
00:00:07,840 --> 00:00:15,030
So as we saw, with Beautiful Soup we could select different

4
00:00:07,840 --> 00:00:15,030
elements using different methods of Beautiful Soup or we

5
00:00:15,070 --> 00:00:24,790
could navigate through our Beautiful Soup parse

6
00:00:15,070 --> 00:00:24,790
tree using different methods like we could

7
00:00:24,790 --> 00:00:28,660
use different methods like "next_sibling", "siblings"

8
00:00:28,840 --> 00:00:36,840
"children" or "parents". These methods help

9
00:00:28,840 --> 00:00:36,840
us navigate through our parse tree while we are

10
00:00:36,840 --> 00:00:40,420
at some tag in our parse tree.

11
00:00:40,570 --> 00:00:49,210
So similarly there is another parser

12
00:00:40,570 --> 00:00:49,210
which which is more commonly

13
00:00:49,270 --> 00:00:59,350
known as "lxml" parser and it uses XPath to select

14
00:00:49,270 --> 00:00:59,350
elements instead of Beautiful Soup. So XPath is generally

15
00:00:59,410 --> 00:01:10,640
faster than Beautiful Soup. So XPath, we

16
00:00:59,410 --> 00:01:10,640
are going to stick to very basic stuff right

17
00:01:10,670 --> 00:01:11,060
now.

18
00:01:11,070 --> 00:01:13,440
And and then I'm going provide you with some documents.

19
00:01:13,610 --> 00:01:19,700
So you know like you could play around with it

20
00:01:13,610 --> 00:01:19,700
later on just understand this more.

21
00:01:20,030 --> 00:01:27,580
OK, so I'll explain how that works, how you

22
00:01:20,030 --> 00:01:27,580
can write a very basic XPath function.

23
00:01:27,950 --> 00:01:35,240
My function I mean an expression to select any element

24
00:01:27,950 --> 00:01:35,240
in your page, in your HTML page or in an XML

25
00:01:35,300 --> 00:01:36,060
file.

26
00:01:36,390 --> 00:01:37,210
OK.

27
00:01:37,460 --> 00:01:38,890
So let's get started.

28
00:01:39,880 --> 00:01:43,240
And Xpath expression contains three different things.

29
00:01:43,240 --> 00:01:52,350
First of all it contains the axis then it contains

30
00:01:43,240 --> 00:01:52,350
a nodetest and then it contains the predicate.

31
00:01:52,500 --> 00:01:54,390
I'll explain what this means.

32
00:01:56,040 --> 00:01:57,550
Can you see this photo here?

33
00:01:57,910 --> 00:02:02,170
So there is this man here and then there are like two boats.

34
00:02:02,170 --> 00:02:03,750
Three boats.

35
00:02:03,760 --> 00:02:09,550
And then you know there's this lighthouse

36
00:02:03,760 --> 00:02:09,550
and then there's the seal here, seal here.

37
00:02:09,760 --> 00:02:12,480
So OK, so what

38
00:02:12,600 --> 00:02:17,670
happens now is that this guy here, he has binoculars. Can you see this?

39
00:02:17,750 --> 00:02:19,160
He has binoculars.

40
00:02:19,160 --> 00:02:21,340
So what do binoculars do?

41
00:02:21,410 --> 00:02:25,880
I mean you know they make like wherever you point them,

42
00:02:26,080 --> 00:02:30,200
they make those objects look closer or they

43
00:02:30,200 --> 00:02:34,520
make those objects bigger. Apart from doing that,

44
00:02:34,520 --> 00:02:38,520
what else do they do? They narrow down your line of sight.

45
00:02:38,540 --> 00:02:42,630
So if you don't use binoculars,

46
00:02:38,540 --> 00:02:42,630
you might be seeing the whole picture.

47
00:02:42,660 --> 00:02:48,300
But if you're using binoculars, they narrow down your line

48
00:02:42,660 --> 00:02:48,300
of sight. I mean you can see the lines here.

49
00:02:48,360 --> 00:02:49,020
I mean

50
00:02:49,080 --> 00:02:51,860
you'll only be seeing this part

51
00:02:51,890 --> 00:02:55,780
and not the whole picture and the whole scenery.

52
00:02:55,790 --> 00:03:01,670
So they're also narrowing down your line of sight,

53
00:02:55,790 --> 00:03:01,670
the binoculars are narrowing down your line of sight.

54
00:03:01,700 --> 00:03:10,250
So wherever you point to them that is like you're

55
00:03:01,700 --> 00:03:10,250
narrowing down your line of sight to that point, to

56
00:03:10,250 --> 00:03:11,620
that specific point.

57
00:03:11,840 --> 00:03:14,210
And this is what we call axis.

58
00:03:14,250 --> 00:03:16,760
Like where are you looking at.

59
00:03:16,760 --> 00:03:19,520
Where exactly are you looking at.

60
00:03:19,520 --> 00:03:25,150
So this was axis and the next part was nodetest. Nodetest is

61
00:03:25,160 --> 00:03:32,030
what exactly are you looking after or are you

62
00:03:25,160 --> 00:03:32,030
looking for boats or are you looking for seals or are

63
00:03:32,030 --> 00:03:34,260
you looking for a lighthouse.

64
00:03:34,310 --> 00:03:36,280
This is the nodetest.

65
00:03:36,320 --> 00:03:37,820
What are you looking for.

66
00:03:38,060 --> 00:03:39,330
So the axis is

67
00:03:39,370 --> 00:03:42,160
where are you looking at.

68
00:03:42,170 --> 00:03:42,960
OK.

69
00:03:43,050 --> 00:03:44,220
Nodetests are

70
00:03:44,330 --> 00:03:45,810
what are you looking for.

71
00:03:47,070 --> 00:03:55,590
And then finally the predicate. The predicate is what

72
00:03:47,070 --> 00:03:55,590
kind of attributes does the object you're

73
00:03:55,590 --> 00:03:56,770
looking for have.

74
00:03:56,910 --> 00:04:01,560
So if you're looking for a boat

75
00:03:56,910 --> 00:04:01,560
what kind of attributes does that boat have.

76
00:04:01,560 --> 00:04:03,130
Should it have red sails,

77
00:04:03,180 --> 00:04:09,190
blue sails, white sails or some of

78
00:04:03,180 --> 00:04:09,190
the stuff, that is the predicate.

79
00:04:09,950 --> 00:04:12,720
I'll just say this again.

80
00:04:12,890 --> 00:04:18,610
The axis is where you're looking at, where you

81
00:04:12,890 --> 00:04:18,610
have narrowed down your line of sight.

82
00:04:18,620 --> 00:04:19,200
OK.

83
00:04:20,320 --> 00:04:23,520
Then the nodetest is what you're looking for.

84
00:04:23,700 --> 00:04:28,750
Are you looking for boats or are you looking

85
00:04:23,700 --> 00:04:28,750
for a lighthouse or are you looking for seals.

86
00:04:28,970 --> 00:04:30,810
Then the final one is predicate

87
00:04:30,900 --> 00:04:40,700
and predicate is like what kind of attributes does

88
00:04:30,900 --> 00:04:40,700
you nodetest should have. Three things: axis, nodetest

89
00:04:40,740 --> 00:04:42,000
and predicate.

90
00:04:42,470 --> 00:04:43,260
OK.

91
00:04:43,820 --> 00:04:45,390
OK, so let's move forward.

92
00:04:45,400 --> 00:04:51,120
I've written this here, the three components that a

93
00:04:45,400 --> 00:04:51,120
location step may contain. Only the nodetest is required.

94
00:04:51,170 --> 00:04:57,850
So by this means that you can omit

95
00:04:51,170 --> 00:04:57,850
the axis and the predicate if not needed.

96
00:04:57,910 --> 00:05:03,310
So if you omit the axis, you omit the double colon that

97
00:04:57,910 --> 00:05:03,310
delimits from sections from the nodetest there so

98
00:05:03,430 --> 00:05:05,860
you can just write the nodetest directly.

99
00:05:05,910 --> 00:05:07,160
I'll explain this to you

100
00:05:07,190 --> 00:05:13,310
but what I mean by this and we can then

101
00:05:07,190 --> 00:05:13,310
write some XPath expressions to

102
00:05:13,420 --> 00:05:15,580
further understand how this works.

103
00:05:16,060 --> 00:05:16,780
OK.

104
00:05:16,780 --> 00:05:21,070
So the axis basically selects the direction you're looking for.

105
00:05:21,070 --> 00:05:27,480
You can see that here, the nodetest selects particular

106
00:05:21,070 --> 00:05:27,480
generic kinds of objects to see which

107
00:05:27,490 --> 00:05:29,030
object are you after.

108
00:05:29,090 --> 00:05:35,470
OK, the predicate highlights those objects

109
00:05:29,090 --> 00:05:35,470
which have the right attributes,

110
00:05:35,640 --> 00:05:37,620
specifically characteristics.

111
00:05:37,690 --> 00:05:39,170
So that's the predicate.

112
00:05:39,490 --> 00:05:46,880
So I have this XML example here. It's like

113
00:05:39,490 --> 00:05:46,880
a pantry and then it has shelfs, then it has

114
00:05:46,900 --> 00:05:48,040
supplies.

115
00:05:48,040 --> 00:05:50,270
And those supplies have paper goods.

116
00:05:50,290 --> 00:05:52,520
And then in paper goods I have two paper goods,

117
00:05:52,530 --> 00:06:00,280
paper towels and paper plates then I

118
00:05:52,530 --> 00:06:00,280
have snack foods in supplies, snack

119
00:06:00,280 --> 00:06:06,440
foods and then I closed my shelf and then I have another

120
00:06:00,280 --> 00:06:06,440
shelf and then I had a supply and then that

121
00:06:06,460 --> 00:06:08,520
I have paper goods

122
00:06:08,580 --> 00:06:11,090
and then I also have snack foods here.

123
00:06:11,350 --> 00:06:13,260
This is my XML file here.

124
00:06:13,420 --> 00:06:14,210
OK.

125
00:06:14,770 --> 00:06:19,490
So what are you going to do now is we going to write an

126
00:06:14,770 --> 00:06:19,490
XPath expression, a very simple one and then

127
00:06:19,500 --> 00:06:21,580
I'm going to explain how this works.

128
00:06:21,580 --> 00:06:27,970
So first of all we start off from nodetest. Let's

129
00:06:21,580 --> 00:06:27,970
forget about axis for now, let's forget about it.

130
00:06:27,990 --> 00:06:31,300
OK, I'll get to that in a while.

131
00:06:31,420 --> 00:06:38,080
So let's start off from the nodetest. So notice if you

132
00:06:31,420 --> 00:06:38,080
want to write an XPath expression note this

133
00:06:38,080 --> 00:06:43,570
is something that is explicitly required, you can't omit them.

134
00:06:38,080 --> 00:06:43,570
You can't omit the nodetest, you can omit the axis

135
00:06:43,600 --> 00:06:48,220
and the predicate but you can omit

136
00:06:43,600 --> 00:06:48,220
the nodetest. You just can't do that.

137
00:06:49,290 --> 00:06:49,750
OK.

138
00:06:49,990 --> 00:06:54,490
So let's say I want to get to this paper good here.

139
00:06:54,940 --> 00:07:01,630
I mean this paper good here. What do I do that?

140
00:06:54,940 --> 00:07:01,630
Is pretty much similar to what we did with Beautiful Soup.

141
00:07:01,740 --> 00:07:09,670
So I said "pantry" and then I say "shelf".

142
00:07:01,740 --> 00:07:09,670
Ok, so when I use this one forward slash

143
00:07:09,680 --> 00:07:18,530
this means that I'm accessing a direct child which of

144
00:07:09,680 --> 00:07:18,530
this "pantry" which should be "shelf" and then I use

145
00:07:18,710 --> 00:07:21,780
another forward slash.

146
00:07:21,840 --> 00:07:23,070
This supplies.

147
00:07:24,040 --> 00:07:26,370
Then I say "paper_goods".

148
00:07:30,100 --> 00:07:30,760
"paper_goods"

149
00:07:30,820 --> 00:07:33,420
and then I say "paper_good".

150
00:07:38,940 --> 00:07:40,230
What this is going to do is

151
00:07:40,270 --> 00:07:48,000
this is going return me all the "paper_good"

152
00:07:40,270 --> 00:07:48,000
tags which are direct children "paper_goods".

153
00:07:48,020 --> 00:07:58,900
So this is this the Xpath expression for

154
00:07:48,020 --> 00:07:58,900
extracting these two tags or elements here.

155
00:07:59,180 --> 00:08:01,580
This is expression for that.

156
00:08:01,610 --> 00:08:04,440
So what I did was this is like your parent, "pantry",

157
00:08:04,490 --> 00:08:10,340
and then I've moved to the direct child, "shelf", and I've moved to

158
00:08:04,490 --> 00:08:10,340
"supplies" and then I moved to paper goods, them I moved

159
00:08:10,340 --> 00:08:12,400
to paper goods.

160
00:08:12,410 --> 00:08:19,350
OK, so let's include the axis now and

161
00:08:12,410 --> 00:08:19,350
see what like what does the axis do.

162
00:08:19,460 --> 00:08:24,710
So the axis basically dictates like are you looking

163
00:08:19,460 --> 00:08:24,710
at your children or are you looking at the parents or

164
00:08:24,720 --> 00:08:29,820
are you looking at the ancesters or are you looking

165
00:08:24,720 --> 00:08:29,820
at descendants like what's the difference between

166
00:08:29,820 --> 00:08:31,360
parent and ancesters.

167
00:08:31,400 --> 00:08:33,290
Parent is like a direct parent.

168
00:08:33,460 --> 00:08:41,410
OK, this "paper_good" only has one parent, "paper_goods".

169
00:08:33,460 --> 00:08:41,410
Let's say this "supplies" is its parent,

170
00:08:41,440 --> 00:08:44,560
so "supplies" is its ancestor.

171
00:08:44,890 --> 00:08:52,690
So "paper_goods" is also an ancester but it is also a parent

172
00:08:44,890 --> 00:08:52,690
but "supplies" is not a parent, it is only

173
00:08:52,690 --> 00:08:57,850
an ancestor and it shows it's only one

174
00:08:52,690 --> 00:08:57,850
ancester to this "paper_good" tag here.

175
00:08:57,870 --> 00:09:07,450
OK, so what axis does is axis

176
00:08:57,870 --> 00:09:07,450
dictates that I will be looking for

177
00:09:07,600 --> 00:09:14,020
children only, descendants only, looking for parents only

178
00:09:07,600 --> 00:09:14,020
or are we looking for ancestors only or how this is

179
00:09:14,020 --> 00:09:16,060
working or what they are.

180
00:09:16,120 --> 00:09:20,610
How are we viewing, what site are we going now.

181
00:09:20,650 --> 00:09:25,180
I provided a document, there is a document please. Just

182
00:09:20,650 --> 00:09:25,180
have a look at it and I'm sure you'll understand for

183
00:09:25,570 --> 00:09:27,030
further like what this means.

184
00:09:27,070 --> 00:09:28,470
What I mean by axis.

185
00:09:28,630 --> 00:09:35,720
So by default if you don't include any axis,

186
00:09:28,630 --> 00:09:35,720
I mean I'm looking at the descendants. That means that

187
00:09:35,720 --> 00:09:38,080
I'm looking at the descendants.

188
00:09:38,260 --> 00:09:47,180
So you know as we haven't included any axis this means

189
00:09:38,260 --> 00:09:47,180
that we are moving downwards, we are looking upwards.

190
00:09:47,350 --> 00:09:53,290
SO by this I would have said that I'm

191
00:09:47,350 --> 00:09:53,290
accessing my parent and this would have

192
00:09:53,290 --> 00:09:55,320
been different, if

193
00:09:55,360 --> 00:09:57,960
I would have moved upwards instead of downwards.

194
00:09:58,890 --> 00:10:01,840
So this is what axis does to this,

195
00:10:01,940 --> 00:10:05,710
to your XPath expression.

196
00:10:05,720 --> 00:10:12,850
OK, so now there's one more thing that you should know.

197
00:10:12,920 --> 00:10:17,510
Well the thing is like let's I want to

198
00:10:12,920 --> 00:10:17,510
get the "paper_good" tags which are here,

199
00:10:17,510 --> 00:10:19,550
all of them, not just one.

200
00:10:19,580 --> 00:10:20,720
All of them.

201
00:10:20,780 --> 00:10:22,000
What do I do now.

202
00:10:22,310 --> 00:10:26,720
So what I can do is I can say "paper_good".

203
00:10:26,820 --> 00:10:28,140
So when I use two slashes

204
00:10:28,150 --> 00:10:34,930
this means that it is going to recursively search

205
00:10:28,150 --> 00:10:34,930
the whole subtree or the tree like wherever we are

206
00:10:34,930 --> 00:10:38,920
and it is going to get me this tag wherever it finds it.

207
00:10:39,860 --> 00:10:41,270
These two slashes mean that.

208
00:10:41,270 --> 00:10:46,420
So let's say I say "shelf", I say "pantry"

209
00:10:49,730 --> 00:10:50,530
and then I say "shelf"

210
00:10:53,230 --> 00:10:54,090
and then I use this.

211
00:10:54,090 --> 00:10:58,660
So what this will do is this will

212
00:10:54,090 --> 00:10:58,660
look for any "paper_good"

213
00:10:58,980 --> 00:11:06,570
which are descendants of this "shelf",

214
00:10:58,980 --> 00:11:06,570
this "shelf" where my cursor is.

215
00:11:06,590 --> 00:11:09,890
So this comes to here,

216
00:11:13,540 --> 00:11:22,860
still here, it is going to look to any "paper_good"

217
00:11:13,540 --> 00:11:22,860
within the scope here, within this "shelf" scope here.

218
00:11:24,210 --> 00:11:29,220
It is going to look at each descendant of

219
00:11:24,210 --> 00:11:29,220
"shelf", each descendant of "shelf" and

220
00:11:29,410 --> 00:11:32,540
there are only two. OK, so if I remove "shelf",

221
00:11:32,540 --> 00:11:38,230
and I only say "pantry", it is going to get me all of the

222
00:11:32,540 --> 00:11:38,230
"paper_good" tags which are present in this XML document

223
00:11:38,240 --> 00:11:39,900
it's also going to get these two.

224
00:11:40,020 --> 00:11:45,780
And then it's also going to get this one again. It is going to do that.

225
00:11:45,810 --> 00:11:51,490
So this is what two slashes does like when

226
00:11:45,810 --> 00:11:51,490
you use two slashes just this means that we are looking

227
00:11:51,490 --> 00:11:57,340
for descendants and moving to descendants. A single slash means that we're only

228
00:11:57,340 --> 00:11:59,870
moving towards our direct children.

229
00:12:00,250 --> 00:12:04,840
And when the searching the whole trees recursively. OK.

230
00:12:04,860 --> 00:12:10,670
So now let's get to the predicate part. So this

231
00:12:10,680 --> 00:12:13,850
here we have the person name is equals to John then I say

232
00:12:13,860 --> 00:12:15,360
child name is equals to John.

233
00:12:15,370 --> 00:12:19,540
And this person has four children.

234
00:12:19,540 --> 00:12:20,740
OK, John,

235
00:12:20,760 --> 00:12:21,450
Connie,

236
00:12:21,460 --> 00:12:30,570
Cindy and Mike. So let's say I want to get the child

237
00:12:21,460 --> 00:12:30,570
which has its name Mike so this name is equals to

238
00:12:30,570 --> 00:12:34,680
Mike, this is an attribute or a characteristic of this child.

239
00:12:34,860 --> 00:12:38,470
So I how can I write a XPath expression for this. What I'm going to do

240
00:12:38,490 --> 00:12:39,910
is I'm going to use predicate here.

241
00:12:39,930 --> 00:12:45,920
So I say "person" and then I say "child"

242
00:12:39,930 --> 00:12:45,920
and then I use this square brackets.

243
00:12:45,960 --> 00:12:49,350
And then I have this array.

244
00:12:49,410 --> 00:12:55,870
And then I say "@name" is equals to "Mike".

245
00:12:55,920 --> 00:12:59,770
This is going to give me...

246
00:12:55,920 --> 00:12:59,770
I've written the predicate here.

247
00:12:59,850 --> 00:13:00,410
OK.

248
00:13:00,690 --> 00:13:08,580
This is going to get me this child here. This is

249
00:13:00,690 --> 00:13:08,580
how we handle attributes.

250
00:13:08,650 --> 00:13:13,730
If this was an HTML tag and it might have

251
00:13:08,650 --> 00:13:13,730
some attributes and this is how we would have

252
00:13:13,730 --> 00:13:19,730
handled them. So I would have moved

253
00:13:13,730 --> 00:13:19,730
from "person" to "child" and

254
00:13:19,760 --> 00:13:21,610
I would have used the square brackets.

255
00:13:21,610 --> 00:13:22,150
OK.

256
00:13:22,240 --> 00:13:30,200
And then I would have written the attribute name,

257
00:13:22,240 --> 00:13:30,200
it is in this iterator, is equals to...

258
00:13:30,530 --> 00:13:34,970
I would have input the value, directly input the value.

259
00:13:34,970 --> 00:13:38,500
So this is how I would have done this and

260
00:13:34,970 --> 00:13:38,500
this is how you write predicates in XPath,

261
00:13:38,770 --> 00:13:40,230
XPath expressions.

262
00:13:40,580 --> 00:13:40,870
OK.

263
00:13:40,880 --> 00:13:47,570
So in the next video, what we are going to do is

264
00:13:40,880 --> 00:13:47,570
we are going to write some examples and we are going to

265
00:13:47,570 --> 00:13:53,720
actually use Selenium and we are going to use XPath

266
00:13:47,570 --> 00:13:53,720
to select different elements so that understand this further.

267
00:13:54,020 --> 00:14:00,350
And I hope just go through the document

268
00:13:54,020 --> 00:14:00,350
provided and try to understand and do

269
00:14:00,380 --> 00:14:08,330
as many examples as you can with this and I think this

270
00:14:00,380 --> 00:14:08,330
is pretty much it. XPath expressions can be

271
00:14:08,330 --> 00:14:12,320
very complex if you get into this and there are a lot of things involved.

272
00:14:12,500 --> 00:14:20,630
But I would like to keep this very simple because

273
00:14:12,500 --> 00:14:20,630
I mean it is in essence a beginner's course.

274
00:14:20,720 --> 00:14:26,120
So I don't want to get into a lot of things with XPath

275
00:14:20,720 --> 00:14:26,120
right now but this is like the whole gist of

276
00:14:26,120 --> 00:14:26,480
it.

277
00:14:26,720 --> 00:14:31,490
So I hope I've made myself clear today and I'll you see the next video.

278
00:14:31,490 --> 00:14:36,240
We will we work on examples by looking with Selenium.

279
00:14:36,440 --> 00:14:39,130
Thank you very much everyone. I'll see in the next video.

