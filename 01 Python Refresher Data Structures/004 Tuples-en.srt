1
00:00:01,110 --> 00:00:04,940
Hello everyone! I hope all you're doing OK.

2
00:00:05,280 --> 00:00:07,720
Last time, we discussed dictionaries.

3
00:00:07,820 --> 00:00:10,920
And today, we will discuss tuples in this lecture here.

4
00:00:11,130 --> 00:00:16,590
So tuples is another very useful data

5
00:00:11,130 --> 00:00:16,590
structure we have in Python. Tuples

6
00:00:16,710 --> 00:00:23,880
basically you could say it is a package containing

7
00:00:16,710 --> 00:00:23,880
different values or it is a sequence of values and

8
00:00:23,880 --> 00:00:27,860
once you have declared, it cannot be changed.

9
00:00:27,970 --> 00:00:31,760
I'll just explain all of this, what I've just said right now.

10
00:00:32,040 --> 00:00:35,790
Think of a person. A person can have different attributes.

11
00:00:35,790 --> 00:00:41,570
Let's say he has name, a person

12
00:00:35,790 --> 00:00:41,570
can have a name, he has an age.

13
00:00:41,610 --> 00:00:45,630
And let's say he can have his hair color.

14
00:00:45,720 --> 00:00:49,010
I mean suggesting that he has hair.

15
00:00:49,290 --> 00:00:50,190
I hope so.

16
00:00:50,190 --> 00:00:58,290
So like let's say I have this guy here. His name is

17
00:00:50,190 --> 00:00:58,290
Sammy and he's 27 years old and he has brown

18
00:00:58,290 --> 00:00:59,410
hair.

19
00:00:59,460 --> 00:01:02,610
So what I can do is I can declare a tuple for this guy.

20
00:01:02,790 --> 00:01:06,660
I can say "person" is equal to "Samy".

21
00:01:06,660 --> 00:01:12,430
Now this is my first value and

22
00:01:06,660 --> 00:01:12,430
then my second value as is his age.

23
00:01:12,570 --> 00:01:21,090
I insert that separating it by comma

24
00:01:12,570 --> 00:01:21,090
and then my third value was his hair

25
00:01:21,090 --> 00:01:28,330
color which was brown. So now I have brown, I have

26
00:01:21,090 --> 00:01:28,330
two different values, they're separated by commas

27
00:01:28,840 --> 00:01:39,540
and if I print "person" now, it say's "Samy", "27", "brown".

28
00:01:28,840 --> 00:01:39,540
So this is one way to declare

29
00:01:39,610 --> 00:01:41,230
a tuple.

30
00:01:41,230 --> 00:01:43,850
This here is a tuple, this "person" variable

31
00:01:43,960 --> 00:01:45,240
right now is a tuple.

32
00:01:45,310 --> 00:01:49,230
And if I print it, you can see

33
00:01:45,310 --> 00:01:49,230
I have three different values here.

34
00:01:49,270 --> 00:01:52,590
I have a sequence of values

35
00:01:49,270 --> 00:01:52,590
in this variable here.

36
00:01:53,570 --> 00:01:55,820
So how do I access each value.

37
00:01:55,870 --> 00:01:58,290
That is pretty much the same as list.

38
00:01:58,340 --> 00:02:05,050
What we use is we use the square brackets and

39
00:01:58,340 --> 00:02:05,050
I input the index for each value, I say like 0

40
00:02:05,090 --> 00:02:11,790
I'll get "Samy". For 1, I'll get 27.

41
00:02:05,090 --> 00:02:11,790
And for 2, I'll get "brown"

42
00:02:14,600 --> 00:02:15,030
OK.

43
00:02:15,180 --> 00:02:20,090
So we use indexes to access each value in a tuple.

44
00:02:20,400 --> 00:02:29,130
So now when we are assigning different values

45
00:02:20,400 --> 00:02:29,130
to a single variable, we call this as boxing.

46
00:02:29,170 --> 00:02:31,870
This is another word for this.

47
00:02:32,080 --> 00:02:35,680
Like for this phenomenon we use another word.

48
00:02:35,680 --> 00:02:37,290
This is known as boxing.

49
00:02:37,780 --> 00:02:48,380
And let's say I have I say "name", his

50
00:02:37,780 --> 00:02:48,380
"age" and "hair_color", I say "person".

51
00:02:48,490 --> 00:02:54,260
So this is known as unboxing or unpacking.

52
00:02:54,370 --> 00:03:03,880
I mean whatever you are confortable with. And if I print

53
00:02:54,370 --> 00:03:03,880
"name" here, I get "Samy". If I print "age" here, I get 27

54
00:03:03,940 --> 00:03:06,730
and if I print "hair_color"

55
00:03:09,590 --> 00:03:10,740
here, I get "brown".

56
00:03:10,850 --> 00:03:13,270
So I mean it works both ways.

57
00:03:13,280 --> 00:03:21,560
So right now "person" is a tuple and it contains three

58
00:03:13,280 --> 00:03:21,560
different values or a sequence of values and the

59
00:03:21,560 --> 00:03:23,480
first one is that person's name.

60
00:03:23,480 --> 00:03:26,670
The second is age, third is his hair color.

61
00:03:26,780 --> 00:03:31,790
And it can be anything, it is not

62
00:03:26,780 --> 00:03:31,790
restricted to strings or integers.

63
00:03:31,790 --> 00:03:35,520
I can have different objects here,

64
00:03:31,790 --> 00:03:35,520
any object here and it will work.

65
00:03:35,540 --> 00:03:41,310
All we have to do is like if I'm going to

66
00:03:35,540 --> 00:03:41,310
insert another value all I do is I have this comma

67
00:03:41,360 --> 00:03:46,670
and enter this number and it will work just fine.

68
00:03:47,070 --> 00:03:47,700
OK.

69
00:03:47,780 --> 00:03:49,280
So moving forward now.

70
00:03:51,510 --> 00:03:52,270
We have...

71
00:03:52,440 --> 00:03:52,730
Right.

72
00:03:52,760 --> 00:03:56,690
Right now we have covered how to declare

73
00:03:52,760 --> 00:03:56,690
a tuple, the syntax for that.

74
00:03:56,950 --> 00:04:00,370
And this declaration is also known as boxing.

75
00:04:00,430 --> 00:04:06,220
What we are doing is we are

76
00:04:00,430 --> 00:04:06,220
boxing different values into a

77
00:04:06,220 --> 00:04:12,490
single variable name. So this we

78
00:04:06,220 --> 00:04:12,490
call boxing and when we

79
00:04:12,490 --> 00:04:18,310
take these values from that single

80
00:04:12,490 --> 00:04:18,310
variable, we call that unboxing or unpacking.

81
00:04:18,370 --> 00:04:23,110
So a tuple is basically also an attribute,

82
00:04:18,370 --> 00:04:23,110
we can actually loop through it.

83
00:04:23,260 --> 00:04:36,060
So I can say "for value in person", print "value" and if I

84
00:04:23,260 --> 00:04:36,060
run, it says "Samy", 27, "brown". So that was like

85
00:04:36,060 --> 00:04:39,680
we can loop through our tuple.

86
00:04:39,720 --> 00:04:41,010
So a tuple is an iterable.

87
00:04:41,100 --> 00:04:48,020
What I mean by iterable is that I can loop

88
00:04:41,100 --> 00:04:48,020
through this iterable like each attribute in Python.

89
00:04:48,090 --> 00:04:54,270
I mean as the word itself says that an iterable

90
00:04:48,090 --> 00:04:54,270
is something on which you can iterate over. So a

91
00:04:54,270 --> 00:04:55,430
tuple is an iterable.

92
00:04:55,440 --> 00:04:57,440
We can iterate over that.

93
00:04:58,090 --> 00:04:58,510
OK.

94
00:04:58,590 --> 00:05:02,480
Now I'll move forward with nested tuples.

95
00:05:02,580 --> 00:05:10,560
What I mean by nested tuples is that I have this "person"

96
00:05:02,580 --> 00:05:10,560
equals to "Samy" and now what I do is I have another

97
00:05:10,560 --> 00:05:11,300
tuple here.

98
00:05:11,340 --> 00:05:12,990
And how do I add that?

99
00:05:16,950 --> 00:05:19,030
OK, I'm not so good with my imagination.

100
00:05:19,040 --> 00:05:20,540
Sorry, it's bad.

101
00:05:20,640 --> 00:05:24,400
Let's say I have his hair color that is brown.

102
00:05:24,450 --> 00:05:27,480
His eye color that is black.

103
00:05:27,570 --> 00:05:29,930
And then I have his age finally.

104
00:05:30,690 --> 00:05:37,840
So what I have right now is I have three

105
00:05:30,690 --> 00:05:37,840
different values in my person variable.

106
00:05:38,130 --> 00:05:39,350
It's tuple sorry.

107
00:05:39,360 --> 00:05:43,010
So the first value is a string, "Samy".

108
00:05:43,140 --> 00:05:45,080
The second is another tuple.

109
00:05:45,270 --> 00:05:48,090
And the third is an integer.

110
00:05:48,090 --> 00:05:50,370
So this is basically a nested tuple.

111
00:05:50,370 --> 00:06:01,200
So if I say print "person" and I say one, this

112
00:05:50,370 --> 00:06:01,200
gives me a tuple, you can see "('brown', 'black')".

113
00:06:01,400 --> 00:06:09,230
It has returned me a tuple so I have a tuple

114
00:06:01,400 --> 00:06:09,230
inside another tuple. I have this tuple and it is inside

115
00:06:09,260 --> 00:06:14,750
another tuple which is here, this person. So

116
00:06:09,260 --> 00:06:14,750
we can have this and I mean this is perfectly valid.

117
00:06:14,750 --> 00:06:20,600
It's the same as like having a dictionary inside another

118
00:06:14,750 --> 00:06:20,600
dictionary or a list inside another list, like 2D lists

119
00:06:20,600 --> 00:06:22,580
or 3D lists.

120
00:06:22,580 --> 00:06:25,670
So this was nested tuples.

121
00:06:25,700 --> 00:06:27,350
I hope this is clear.

122
00:06:27,650 --> 00:06:30,420
And lastly what I want to clear was

123
00:06:30,470 --> 00:06:35,720
I mean what differentiates a tuple from a list

124
00:06:30,470 --> 00:06:35,720
or another data structure like some other data

125
00:06:35,720 --> 00:06:36,430
structures.

126
00:06:36,620 --> 00:06:38,310
That is that there are immutable.

127
00:06:38,330 --> 00:06:45,140
Once you have declared then, we can't edit them.

128
00:06:38,330 --> 00:06:45,140
If I have a list, I say "my_list" is equal to

129
00:06:45,690 --> 00:06:49,280
"[1, 2, 3]" and I can say "my_list",

130
00:06:49,280 --> 00:06:53,610
0, is equals to 100. And if I print "my_list[0]",

131
00:06:53,660 --> 00:06:59,300
if I print "my_list",

132
00:06:59,520 --> 00:07:01,630
I get "100, 2, 3]".

133
00:07:01,710 --> 00:07:09,780
So I can change the values in my list but I

134
00:07:01,710 --> 00:07:09,780
can't do this for a tuple like if I say person

135
00:07:11,050 --> 00:07:14,450
0 is equals to "new_name".

136
00:07:14,890 --> 00:07:23,160
And if I print "person" now that is going to give

137
00:07:14,890 --> 00:07:23,160
me an error because once you have declared a

138
00:07:23,160 --> 00:07:26,680
tuple you can't change its value.

139
00:07:26,690 --> 00:07:28,610
It is immutable.

140
00:07:28,610 --> 00:07:32,160
The values are immutable once you have declared them.

141
00:07:32,300 --> 00:07:36,290
So that's one important thing to remember about tuples.

142
00:07:36,500 --> 00:07:39,580
You can't change their value once you have declared them.

143
00:07:40,010 --> 00:07:41,350
I hope this is clear.

144
00:07:41,390 --> 00:07:48,120
And next we'll move to lists comprehensions like

145
00:07:41,390 --> 00:07:48,120
all the comprehensions, we will move to dictionary comprehensions

146
00:07:48,230 --> 00:07:51,380
and tuple comprehension and list comprehension.

147
00:07:51,830 --> 00:07:55,220
I hope this helps and thank you very much.

148
00:07:55,220 --> 00:07:56,290
Have a nice day.

